apply plugin: rootProject.ext.isModule ? 'com.android.application' : 'com.android.library'
apply plugin: 'org.jetbrains.kotlin.android'
apply plugin: 'kotlin-kapt'
android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {


        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        // ARouter配置
        kapt {
            arguments {
                arg("AROUTER_MODULE_NAME", project.getName())
            }
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            if (rootProject.ext.isModule) {
                //独立运行
                manifest.srcFile 'src/main/module/AndroidManifest.xml'
            } else {
                //合并到宿主
                manifest.srcFile 'src/main/AndroidManifest.xml'
                resources {
                    //正式版本时，排除alone文件夹下所有调试文件
                    exclude 'src/main/module/*'
                }
            }
        }
    }
    //签名
    signingConfigs {
        releaseConfig {
            storeFile file("lwkey.jks")
            storePassword "283283"
            keyAlias "lw"
            keyPassword "283283"
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            signingConfig signingConfigs.releaseConfig
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    dataBinding {
        enabled = true
    }
}

dependencies {
    implementation project(path: ':mvvm')
    implementation project(path: ':Library')
    implementation project(path: ':IncrementalUpdate')

    // kapt无法像api那样穿透（从lib_common带过来），所以不能放在lib_common中，而是放在这里让每个组件都引入一份
    kapt rootProject.ext.thirdPart.arouter_compiler
}
import java.security.MessageDigest

task sha256ReleaseApk {
    dependsOn 'assembleRelease'
    doLast {
        def apkFile = file("${project.buildDir}/outputs/apk/release/app-release.apk")
        def sha256 = MessageDigest.getInstance("SHA-256")
        sha256.update(apkFile.bytes)
        println "SHA-256 value of release apk: " + sha256.digest().encodeHex()
    }
}